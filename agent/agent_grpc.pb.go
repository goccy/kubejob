// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: agent.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_Exec_FullMethodName     = "/agent.Agent/Exec"
	Agent_CopyFrom_FullMethodName = "/agent.Agent/CopyFrom"
	Agent_CopyTo_FullMethodName   = "/agent.Agent/CopyTo"
	Agent_Finish_FullMethodName   = "/agent.Agent/Finish"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	CopyFrom(ctx context.Context, in *CopyFromRequest, opts ...grpc.CallOption) (Agent_CopyFromClient, error)
	CopyTo(ctx context.Context, opts ...grpc.CallOption) (Agent_CopyToClient, error)
	Finish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, Agent_Exec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CopyFrom(ctx context.Context, in *CopyFromRequest, opts ...grpc.CallOption) (Agent_CopyFromClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_CopyFrom_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentCopyFromClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_CopyFromClient interface {
	Recv() (*CopyFromResponse, error)
	grpc.ClientStream
}

type agentCopyFromClient struct {
	grpc.ClientStream
}

func (x *agentCopyFromClient) Recv() (*CopyFromResponse, error) {
	m := new(CopyFromResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) CopyTo(ctx context.Context, opts ...grpc.CallOption) (Agent_CopyToClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], Agent_CopyTo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentCopyToClient{stream}
	return x, nil
}

type Agent_CopyToClient interface {
	Send(*CopyToRequest) error
	Recv() (*CopyToResponse, error)
	grpc.ClientStream
}

type agentCopyToClient struct {
	grpc.ClientStream
}

func (x *agentCopyToClient) Send(m *CopyToRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentCopyToClient) Recv() (*CopyToResponse, error) {
	m := new(CopyToResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Finish(ctx context.Context, in *FinishRequest, opts ...grpc.CallOption) (*FinishResponse, error) {
	out := new(FinishResponse)
	err := c.cc.Invoke(ctx, Agent_Finish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	CopyFrom(*CopyFromRequest, Agent_CopyFromServer) error
	CopyTo(Agent_CopyToServer) error
	Finish(context.Context, *FinishRequest) (*FinishResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Exec(context.Context, *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (UnimplementedAgentServer) CopyFrom(*CopyFromRequest, Agent_CopyFromServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFrom not implemented")
}
func (UnimplementedAgentServer) CopyTo(Agent_CopyToServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyTo not implemented")
}
func (UnimplementedAgentServer) Finish(context.Context, *FinishRequest) (*FinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Exec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CopyFrom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFromRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).CopyFrom(m, &agentCopyFromServer{stream})
}

type Agent_CopyFromServer interface {
	Send(*CopyFromResponse) error
	grpc.ServerStream
}

type agentCopyFromServer struct {
	grpc.ServerStream
}

func (x *agentCopyFromServer) Send(m *CopyFromResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_CopyTo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).CopyTo(&agentCopyToServer{stream})
}

type Agent_CopyToServer interface {
	Send(*CopyToResponse) error
	Recv() (*CopyToRequest, error)
	grpc.ServerStream
}

type agentCopyToServer struct {
	grpc.ServerStream
}

func (x *agentCopyToServer) Send(m *CopyToResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentCopyToServer) Recv() (*CopyToRequest, error) {
	m := new(CopyToRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Finish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Finish(ctx, req.(*FinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exec",
			Handler:    _Agent_Exec_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _Agent_Finish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CopyFrom",
			Handler:       _Agent_CopyFrom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyTo",
			Handler:       _Agent_CopyTo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent.proto",
}
